;;; -*- Scheme -*-
;;;
;;; Copyright 2010 Free Software Foundation, Inc.
;;;
;;; This file is part of GNU Radio
;;;
;;; GNU Radio is free software; you can redistribute it and/or modify
;;; it under the terms of the GNU General Public License as published by
;;; the Free Software Foundation; either version 3, or (at your option)
;;; any later version.
;;;
;;; GNU Radio is distributed in the hope that it will be useful,
;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;; GNU General Public License for more details.
;;;
;;; You should have received a copy of the GNU General Public License
;;; along with this program.  If not, see <http://www.gnu.org/licenses/>.
;;;

;;; If you're using Emacs's Scheme mode:
;;;   (put 'with-test-prefix 'scheme-indent-function 1)

;;; See the comments in gnuradio/test-suite/lib.scm for info on writing tests.
;;; See also the very end of the file, where the test-equal, test-eqv
;;; and test-eq macros are defined.

(use-modules (gnuradio test-suite lib))
(use-modules (gnuradio core))
(use-modules (oop goops))
(use-modules (ice-9 format))


;;; Test complex<float> scalars
(pass-if (equal? 5.0+5.0i (gr:complex-scalar-test0)))
(pass-if (equal? 1.5+0.5i (gr:complex-scalar-test1 1+1i)))

;;; Test complex<float> vectors
(pass-if (verbose-equal? #(0+0i 1+1i 2+2i 3+3i 4+4i)
			 (gr:complex-vec-test0)))

(pass-if (verbose-equal? #(1.5+0.5i 2.5+1.5i 3.5+2.5i)
			 (gr:complex-vec-test1 #(1+1i 2+2i 3+3i))))


;;; Add test code for all constructors in these files

;;; ./general/gr_additive_scrambler_bb.h
(pass-if (true? (gr:additive-scrambler-bb 0 0 0 0)))

;; Here's one that will throw if its arg is 0
(pass-if (true? (gr:unpack-k-bits-bb 10)))
(pass-if-throw "confirm throw gr:unpack-k-bits-bb" #t (true? (gr:unpack-k-bits-bb 0)))

;;; ./general/gr_agc2_cc.h
(pass-if (true? (gr:agc2-cc 1e-1 1e-2 1.0 1.0 0.0)))

;;; ./general/gr_agc2_ff.h
(pass-if (true? (gr:agc2-ff 0 0 0 0 0)))

;;; ./general/gr_agc_cc.h
(pass-if (true? (gr:agc-cc 0 0 0 0)))

;;; ./general/gr_agc_ff.h
(pass-if (true? (gr:agc-ff 0 0 0 0)))

;;; ./general/gr_align_on_samplenumbers_ss.h
(pass-if (true? (gr:align-on-samplenumbers-ss 2 128)))
(pass-if-throw "confirm throw gr:align-on-samplenumbers-ss" #t (true? (gr:align-on-samplenumbers-ss 0 0)))

;;; ./general/gr_bin_statistics_f.h WONTFIX: requires gr_feval_dd & swig directors
;;;(pass-if (true? (gr:bin-statistics-f 1 (gr:msg-queue) 0 0 0)))

;;; ./general/gr_bytes_to_syms.h
(pass-if (true? (gr:bytes-to-syms)))

;;; ./general/gr_char_to_float.h
(pass-if (true? (gr:char-to-float)))

;;; ./general/gr_check_counting_s.h
(pass-if (true? (gr:check-counting-s #f)))

;;; ./general/gr_check_lfsr_32k_s.h
(pass-if (true? (gr:check-lfsr-32k-s)))

;;; ./general/gr_complex_to_interleaved_short.h
(pass-if (true? (gr:complex-to-interleaved-short)))

;;; ./general/gr_complex_to_xxx.h
(pass-if (true? (gr:complex-to-float 1)))
(pass-if (true? (gr:complex-to-real 1)))
(pass-if (true? (gr:complex-to-imag 1)))
(pass-if (true? (gr:complex-to-mag 1)))
(pass-if (true? (gr:complex-to-mag-squared 1)))
(pass-if (true? (gr:complex-to-arg 1)))

;;; ./general/gr_conjugate_cc.h
(pass-if (true? (gr:conjugate-cc)))

;;; ./general/gr_copy.h
(pass-if (true? (gr:copy 1)))

;;; ./general/gr_cpfsk_bc.h
(pass-if (true? (gr:cpfsk-bc 1 1 1)))

;;; ./general/gr_ctcss_squelch_ff.h
(pass-if (true? (gr:ctcss-squelch-ff 0 0 0 0 0 #t)))

;;; ./general/gr_decode_ccsds_27_fb.h
(pass-if (true? (gr:decode-ccsds-27-fb)))

;;; ./general/gr_deinterleave.h
(pass-if (true? (gr:deinterleave 1)))

;;; ./general/gr_delay.h
(pass-if (true? (gr:delay 1 1)))
 
;;; ./general/gr_descrambler_bb.h
(pass-if (true? (gr:descrambler-bb 0 0 0)))

;;; ./general/gr_diff_decoder_bb.h
(pass-if (true? (gr:diff-decoder-bb 0)))

;;; ./general/gr_diff_encoder_bb.h
(pass-if (true? (gr:diff-encoder-bb 0)))

;;; ./general/gr_diff_phasor_cc.h
(pass-if (true? (gr:diff-phasor-cc)))

;;; ./general/gr_dpll_bb.h
(pass-if (true? (gr:dpll-bb 0 0)))

;;; ./general/gr_encode_ccsds_27_bb.h
(pass-if (true? (gr:encode-ccsds-27-bb)))

;;; ./general/gr_fake_channel_coder_pp.h
(pass-if (true? (gr:fake-channel-encoder-pp 1 1)))
(pass-if-throw "confirm throw" #t (true? (gr:fake-channel-encoder-pp -1 1)))

;;; ./general/gr_feedforward_agc_cc.h
(pass-if (true? (gr:feedforward-agc-cc 1 1)))

;;; ./general/gr_fft_vcc.h
(pass-if (true? (gr:fft-vcc 1 #f #(1.0 2.0) #t)))

;;; ./general/gr_fft_vfc.h
(pass-if (true? (gr:fft-vfc 4 #t #(1.0 2.0 3.0 4.0))))
(pass-if-throw "confirm throw gr:fft-vfc" #t (true? (gr:fft-vfc 4 #f #(1.0 2.0 3.0 4.0))))

;; ;;; ./general/gr_float_to_char.h
(pass-if (true? (gr:float-to-char)))

;; ;;; ./general/gr_float_to_complex.h
(pass-if (true? (gr:float-to-complex 1)))

;;; ./general/gr_float_to_short.h
(pass-if (true? (gr:float-to-short)))

;;; ./general/gr_float_to_uchar.h
(pass-if (true? (gr:float-to-uchar)))

;;; ./general/gr_fmdet_cf.h
(pass-if (true? (gr:fmdet-cf 0 0 0 0)))

;;; ./general/gr_framer_sink_1.h
(pass-if (true? (gr:framer-sink-1 (gr:msg-queue))))

;;; ./general/gr_frequency_modulator_fc.h
(pass-if (true? (gr:frequency-modulator-fc 0)))

;;; ./general/gr_glfsr_source_b.h
(pass-if (true? (gr:glfsr-source-b 1 #t 0 1)))
(pass-if-throw "confirm throw" #t (true? (gr:glfsr_source_b 33 #t 0 0)))

;;; ./general/gr_glfsr_source_f.h
(pass-if (true? (gr:glfsr-source-f 1 #t 1 1)))
(pass-if-throw "confirm throw" #t (true? (gr:glfsr_source_f 33 #t 0 0)))

;;; ./general/gr_head.h
(pass-if (true? (gr:head 1 1)))

;;; ./general/gr_interleave.h
(pass-if (true? (gr:interleave 1)))

;;; ./general/gr_interleaved_short_to_complex.h
(pass-if (true? (gr:interleaved-short-to-complex)))

;;; ./general/gr_keep_one_in_n.h
(pass-if (true? (gr:keep-one-in-n 1 1)))

;;; ./general/gr_kludge_copy.h
(pass-if (true? (gr:kludge-copy 1)))

;;; ./general/gr_lfsr_32k_source_s.h
(pass-if (true? (gr:lfsr-32k-source-s)))

;;; ./general/gr_map_bb.h
(pass-if (true? (gr:map-bb #(1 2))))

;;; ./general/gr_nlog10_ff.h
(pass-if (true? (gr:nlog10-ff 1 1 1)))

;;; ./general/gr_nop.h
(pass-if (true? (gr:nop 1)))

;;; ./general/gr_null_sink.h
(pass-if (true? (gr:null-sink 1)))

;;; ./general/gr_null_source.h
(pass-if (true? (gr:null-source 1)))

;;; ./general/gr_pa_2x2_phase_combiner.h
(pass-if (true? (gr:pa-2x2-phase-combiner)))

;;; ./general/gr_packet_sink.h
(pass-if (true? (gr:packet-sink #(1 2) (gr:msg-queue) -1)))

;;; ./general/gr_peak_detector2_fb.h
(pass-if (true? (gr:peak-detector2-fb 0 0 0)))

;;; ./general/gr_phase_modulator_fc.h
(pass-if (true? (gr:phase-modulator-fc 0)))

;;; ./general/gr_pll_carriertracking_cc.h
(pass-if (true? (gr:pll-carriertracking-cc 0 0 0)))

;;; ./general/gr_pll_freqdet_cf.h
(pass-if (true? (gr:pll-freqdet-cf 0 0 0)))

;;; ./general/gr_pll_refout_cc.h
(pass-if (true? (gr:pll-refout-cc 0 0 0)))

;;; ./general/gr_pn_correlator_cc.h
(pass-if (true? (gr:pn-correlator-cc 1 1 1)))

;;; ./general/gr_probe_avg_mag_sqrd_c.h
(pass-if (true? (gr:probe-avg-mag-sqrd-c 0 0)))

;;; ./general/gr_probe_avg_mag_sqrd_cf.h
(pass-if (true? (gr:probe-avg-mag-sqrd-cf 0 0)))

;;; ./general/gr_probe_avg_mag_sqrd_f.h
(pass-if (true? (gr:probe-avg-mag-sqrd-f 0 0)))

;;; ./general/gr_probe_density_b.h
(pass-if (true? (gr:probe-density-b 0)))

;;; ./general/gr_probe_mpsk_snr_c.h
(pass-if (true? (gr:probe-mpsk-snr-c 0)))

;;; ./general/gr_probe_signal_f.h
(pass-if (true? (gr:probe-signal-f)))

;;; ./general/gr_pwr_squelch_cc.h
(pass-if (true? (gr:pwr-squelch-cc 0 0 0 #f)))

;;; ./general/gr_pwr_squelch_ff.h
(pass-if (true? (gr:pwr-squelch-ff 0.0 0.0 0 #f)))

;;; ./general/gr_quadrature_demod_cf.h
(pass-if (true? (gr:quadrature-demod-cf 0)))

;;; ./general/gr_rail_ff.h
(pass-if (true? (gr:rail-ff 0 0)))

;;; ./general/gr_regenerate_bb.h
(pass-if (true? (gr:regenerate-bb 0 0)))

;;; ./general/gr_repeat.h
(pass-if (true? (gr:repeat 1 1)))

;;; ./general/gr_rms_cf.h
(pass-if (true? (gr:rms-cf 0)))

;;; ./general/gr_rms_ff.h
(pass-if (true? (gr:rms-ff 0)))

;;; ./general/gr_scrambler_bb.h
(pass-if (true? (gr:scrambler-bb 0 0 0)))

;;; ./general/gr_short_to_float.h
(pass-if (true? (gr:short-to-float)))

;;; ./general/gr_simple_correlator.h
(pass-if (true? (gr:simple-correlator 0)))

;;; ./general/gr_simple_framer.h
(pass-if (true? (gr:simple-framer 0)))

;;; ./general/gr_simple_squelch_cc.h
(pass-if (true? (gr:simple-squelch-cc 0 0)))

;;; ./general/gr_skiphead.h
(pass-if (true? (gr:skiphead 1 1)))

;;; ./general/gr_squash_ff.h
(pass-if (true? (gr:squash-ff #(1.0 2.0 3.0 4.0 5.0) #(1.0 2.0 3.0 4.0 5.0))))

;;; ./general/gr_squelch_base_cc.h WONTFIX: not wrapped
;;; (pass-if (true? (gr:squelch-base-cc "foo" 0 #f)))

;;; ./general/gr_squelch_base_ff.h WONTFIX: not wrapped
;; (pass-if (true? (gr:squelch-base-ff "foo" 0 #f)))

;;; ./general/gr_stream_mux.h
(pass-if (true? (gr:stream-mux 1 #(1 2))))

;;; ./general/gr_stream_to_streams.h
(pass-if (true? (gr:stream-to-streams 1 1)))

;;; ./general/gr_stream_to_vector.h
(pass-if (true? (gr:stream-to-vector 1 1)))

;;; ./general/gr_streams_to_stream.h
(pass-if (true? (gr:streams-to-stream 1 1)))

;;; ./general/gr_streams_to_vector.h
(pass-if (true? (gr:streams-to-vector 1 1)))

;;; ./general/gr_stretch_ff.h
(pass-if (true? (gr:stretch-ff 1 1)))

;;; ./general/gr_test.h
(pass-if (true? (gr:test "foo" 1 1 1 1 1 1 1 1)))

;;; ./general/gr_threshold_ff.h
(pass-if (true? (gr:threshold-ff 0 0)))

;;; ./general/gr_throttle.h
(pass-if (true? (gr:throttle 1 1)))

;;; ./general/gr_uchar_to_float.h
(pass-if (true? (gr:uchar-to-float)))

;;; ./general/gr_vco_f.h
(pass-if (true? (gr:vco-f 0 0 0)))

;;; ./general/gr_vector_to_stream.h
(pass-if (true? (gr:vector-to-stream 1 1)))

;;; ./general/gr_vector_to_streams.h
(pass-if (true? (gr:vector-to-streams 1 1)))

;;; ./general/gr_wavelet_ff.h
(pass-if (true? (gr:wavelet-ff 1024 20 #t)))

;;; ./general/gr_wvps_ff.h
(pass-if (true? (gr:wvps-ff 2)))
