#!/usr/bin/env pythonw2.7
#
# Copyright 2006,2010 Free Software Foundation, Inc.
# 
# This file is part of GNU Radio
# 
# GNU Radio is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3, or (at your option)
# any later version.
# 
# GNU Radio is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with GNU Radio; see the file COPYING.  If not, write to
# the Free Software Foundation, Inc., 51 Franklin Street,
# Boston, MA 02110-1301, USA.
#
# SSP Wrapper v0.1 
#       Generate GNU Radio Module, Stevens SSP project 2012
#           Xingzhong Xu, March 2012
#           xxu7@stevens.edu

from Cheetah.Template import Template
from datetime import date
from optparse import OptionParser
import os


class sspTemplate:
    """sspTemplate"""
    def __init__(self, nameSpace):
        self.nameSpace = nameSpace
        

    def render(self):
        
        funcName = self.nameSpace['funcName']
        
        inc_tpl = open('./template/ssp_include.tpl', 'r')
        cc_tpl = open('./template/ssp_work.tpl', 'r')
        swig_tpl = open('./template/ssp_swig.tpl', 'r')
        qa_tpl = open('./template/ssp_qa.tpl', 'r')

        inc_tgt = open('./include/%s.h'%funcName, 'w')
        cc_tgt = open('./lib/%s.cc'%funcName, 'w')
        swig_tgt = open('./swig/ssp_swig.i', 'w')
        qa_tgt = open('./python/qa_ssp.py', 'w')

        inc = Template(inc_tpl.read(), searchList=[nameSpace])
        inc_tgt.write(str(inc))

        cc = Template(cc_tpl.read(), searchList=[nameSpace])
        cc_tgt.write(str(cc))

        swig = Template(swig_tpl.read(), searchList=[nameSpace])
        swig_tgt.write(str(swig))

        qa = Template(qa_tpl.read(), searchList=[nameSpace])
        qa_tgt.write(str(qa))
        
        self.close(inc_tpl)
        self.close(cc_tpl)
        self.close(swig_tpl)
        self.close(qa_tpl)
        self.close(inc_tgt)
        self.close(cc_tgt)
        self.close(qa_tgt)
        self.close(swig_tgt)
        

    def close(self, f):
        f.close()
    
    def clean(self):
        os.system("rm -f ./lib/*.cc")
        os.system("rm -f ./include/ssp*.h")
        os.system("rm -f ./python/qa*.py")
        os.system("rm -f ./swig/ssp*.i")
        


if __name__ == '__main__':
    parser = OptionParser()
    parser.add_option("-f", "--file",
                      action="store", type="string", dest="filename")
    parser.add_option("-c", action="store_true", dest="clean")
    (options, args) = parser.parse_args()
    if len(args) != 0:
        raise SystemExit, 1
    
    funcName = "ssp_mysquare_ff"
    Header = "This file is automatically generated by SSP wrapper v0.1"
    Author = "Xingzhong"
    Today = date.today().strftime("%A %d. %B %Y")

    nameSpace = {
        "FUNCNAME":funcName.upper(), 
        "funcName":funcName,
        "Header":Header,
        "Author":Author,
        "Today":Today
    }
    
    tpl = sspTemplate(nameSpace)
    try:    
        # Run forever
        if options.clean:
            tpl.clean()
        else:
            tpl.render()
    except KeyboardInterrupt:
        # Ctrl-C exits
        pass
