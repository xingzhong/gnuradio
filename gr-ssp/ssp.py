#!/usr/bin/env python
#
# Copyright 2006,2010 Free Software Foundation, Inc.
# 
# This file is part of GNU Radio
# 
# GNU Radio is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3, or (at your option)
# any later version.
# 
# GNU Radio is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with GNU Radio; see the file COPYING.  If not, write to
# the Free Software Foundation, Inc., 51 Franklin Street,
# Boston, MA 02110-1301, USA.
#
# SSP Wrapper v0.1 
#       Generate GNU Radio Module, Stevens SSP project 2012
#           Xingzhong Xu, March 2012
#           xxu7@stevens.edu

from Cheetah.Template import Template
from datetime import date
from optparse import OptionParser
import os
import xml.etree.ElementTree as xml

class sspTemplate:
    """sspTemplate"""
    def __init__(self, nameSpace):
        self.nameSpace = nameSpace
        

    def render(self):
        
        funcName = self.nameSpace['funcName']
        
        inc_tpl = open('./template/ssp_include.tpl', 'r')
        cc_tpl = open('./template/ssp_work.tpl', 'r')
        swig_tpl = open('./template/ssp_swig.tpl', 'r')
        qa_tpl = open('./template/ssp_qa.tpl', 'r')
	mk_tpl = open('./template/cmake.tpl', 'r')
	api_tpl = open('./template/api.tpl', 'r')
	if self.nameSpace['lang'] == 'cpp':
		ker_tpl = open('./template/kernel_cpp.tpl', 'r')
	elif self.nameSpace['lang'] == 'cuda':
		ker_tpl = open('./template/kernel_cu.tpl', 'r')
		

        inc_tgt = open('./include/%s.h'%funcName, 'w')
        cc_tgt = open('./lib/%s.cc'%funcName, 'w')
        swig_tgt = open('./swig/ssp_swig.i', 'w')
        qa_tgt = open('./python/qa_ssp.py', 'w')
	mk_tgt = open('./lib/CMakeLists.txt', 'w')
	api_tgt = open('./include/api.h', 'w')
	if self.nameSpace['lang'] == 'cpp':
        	ker_tgt = open('./kernel/kernel.cpp', 'w')
	elif self.nameSpace['lang'] == 'cuda':
        	ker_tgt = open('./kernel/kernel.cu', 'w')

        inc = Template(inc_tpl.read(), searchList=[self.nameSpace])
        inc_tgt.write(str(inc))

        cc = Template(cc_tpl.read(), searchList=[self.nameSpace])
        cc_tgt.write(str(cc))

        swig = Template(swig_tpl.read(), searchList=[self.nameSpace])
        swig_tgt.write(str(swig))

        qa = Template(qa_tpl.read(), searchList=[self.nameSpace])
        qa_tgt.write(str(qa))

	mk = Template(mk_tpl.read(), searchList=[self.nameSpace])
        mk_tgt.write(str(mk))

	api = Template(api_tpl.read(), searchList=[self.nameSpace])
        api_tgt.write(str(api))
        
	ker = Template(ker_tpl.read(), searchList=[self.nameSpace])
        ker_tgt.write(str(ker))

        self.close(inc_tpl)
        self.close(cc_tpl)
        self.close(swig_tpl)
        self.close(qa_tpl)
        self.close(inc_tgt)
        self.close(cc_tgt)
        self.close(qa_tgt)
        self.close(swig_tgt)
	self.close(mk_tgt)
        self.close(mk_tpl)
        self.close(api_tpl)
        self.close(api_tgt)
        self.close(ker_tpl)
        self.close(ker_tgt)
        

    def close(self, f):
        f.close()
    
    def clean(self):
        os.system("rm -f ./lib/*.cc")
        os.system("rm -f ./include/ssp*.h")
        os.system("rm -f ./python/qa*.py")
        os.system("rm -f ./swig/ssp*.i")
	os.system("rm -f ./lib/CMakeLists.txt")
        
class Config:
    def __init__(self, file, kfile):
        self.f = file
        tree = xml.parse(self.f)
        root = tree.getroot()
        self.func = root.find('name').text.strip()
        self.typein = root.find('type_in').text.strip()
        self.typeout = root.find('type_out').text.strip()
        self.rate = int(root.find('rate').text.strip())
        self.sizeout = root.find('size_out').text.strip()
        self.output = root.find('output').text.strip()
        self.input = root.find('input').text.strip()
        self.lang = root.find('lang').text.strip()
        k = open(kfile, 'r')
        self.kernel = str(k.read())
        k.close()


    def get(self):
        config = {}
        # system arguments
        config['Header'] = "This file is automatically generated by SSP wrapper v0.1"
        config['Author'] = "Xingzhong"
        config['Today'] = date.today().strftime("%A %d. %B %Y")
        # functionality arguments
        TYPE = {"float":"f", "complex": "c", "short":"s", "integer":"i"}
        config['r1'] = 1
        config['r2'] = self.rate
        config['t1'] = self.typein
        config['t2'] = self.typeout
        config['Type1'] = TYPE[config['t1']]
        config['Type2'] = TYPE[config['t2']]
        config['kernel'] = self.kernel
        funcName = self.func + "_" + config['Type1'] + config['Type2']
        config['Name'] = funcName
        config['FUNCNAME'] = ('ssp_' + funcName).upper()
        config['funcName'] = 'ssp_' + funcName
        config['sizeout'] = self.sizeout
        config['input'] = self.input
        config['output'] = self.output
	config['lang'] = self.lang
        
        return config

if __name__ == '__main__':
    parser = OptionParser()
    parser.add_option("-f", "--file", 
		action="store", type="string", dest="filename")
    parser.add_option("-c", action="store_true", dest="clean")
    (options, args) = parser.parse_args()
    if len(args) != 0:
	raise SystemExit, 1
    if not options.filename:
        filename = "./example/c/kernel"
    else:
        filename = options.filename

    config = Config("./config.xml", filename)
    nameSpace = config.get()

    tpl = sspTemplate(nameSpace)

    try:    
        # Run forever
        if options.clean:
            tpl.clean()
        else:
            tpl.render()
    except KeyboardInterrupt:
        # Ctrl-C exits
        pass
