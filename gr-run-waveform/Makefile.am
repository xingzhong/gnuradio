#
# Copyright 2004,2008,2009,2010 Free Software Foundation, Inc.
# 
# This file is part of GNU Radio
# 
# GNU Radio is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3, or (at your option)
# any later version.
# 
# GNU Radio is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with GNU Radio; see the file COPYING.  If not, write to
# the Free Software Foundation, Inc., 51 Franklin Street,
# Boston, MA 02110-1301, USA.
# 

ACLOCAL_AMFLAGS = -I config
SUBDIRS = config
EXTRA_DIST = gen-xyzzy \
	guile/readline.scm \
	guile/cat.scm \
	guile/simple.scm

# build the standalone waveform application
bin_PROGRAMS = gr-run-waveform-binary

# Rather than build a library, we just use a variable so the same code
# can be used in test cases, as well as the run-waveform application.
SRCS = xyzzy.cc xyzzy-load.c

# This is where the data file created by gen-xyzzy gets installed. This file
# is needed by run-waveform and the test case.
filesystemdir = $(datarootdir)/gnuradio/gr-run-waveform

# libpath is to support xyzzy-load.cc, filesystem.dat is the data file
BUILT_SOURCES = libpath.h filesystem.dat
dist_filesystem_DATA = filesystem.dat

# A unit test case for the XYZZY class
check_PROGRAMS = test_xyzzy test_embed
test_xyzzy_SOURCES = test_xyzzy.cc  xyzzy.cc xyzzy-load.c
test_xyzzy_CPPFLAGS = $(GUILE_CFLAGS) \
	-DSRCDIR=\"$(srcdir)\" \
	-DDATAROOTDIR=\"$(datarootdir)\"
test_xyzzy_LDADD = $(GUILE_LIBS)
test_xyzzy_DEPENDENCIES = $(BUILT_SOURCES)

test_embed_SOURCES = test_embed.cc $(SRCS)
test_embed_CPPFLAGS = $(GUILE_CFLAGS) \
	-DSRCDIR=\"$(srcdir)\" \
	-DPKGLIBDIR=\"$(pkglibdir)\" \
	-DDATAROOTDIR=\"$(datarootdir)\" \
	-DLIBDIR=\"$(libdir)\"

test_embed_LDADD = $(GUILE_LIBS)
test_embed_DEPENDENCIES = $(BUILT_SOURCES)

# Don't install the internal header
noinst_HEADERS = xyzzy.h

# The standalone waveform application
gr_run_waveform_binary_SOURCES = gr-run-waveform-binary.cc $(SRCS)
gr_run_waveform_binary_CPPFLAGS = $(GUILE_CFLAGS) \
	-DSRCDIR=\"$(srcdir)\" \
	-DPKGLIBDIR=\"$(pkglibdir)\" \
	-DDATAROOTDIR=\"$(datarootdir)\" \
	-DLIBDIR=\"$(libdir)\"
# Uncommenting this force make to statically link in the guile library.
# Note that this will fail to link it you don't have libguile.a.
# run_waveform_LDFLAGS = -static
gr_run_waveform_binary_LDADD = $(GUILE_LIBS)
gr_run_waveform_binary_DEPENDENCIES =  $(BUILT_SOURCES)

DISTCLEANFILES = gr-run-waveform.tar.gz libpath.h filesystem.dat

libpath.h: $(srcdir)/Makefile.in  $(top_builddir)/config.status
	@echo "Generating libpath.h..."
	@rm -f libpath.tmp
	@echo '/* generated by Makefile */' > libpath.tmp
	@echo '#define SCM_PKGDATA_DIR "$(pkgdatadir)"' >> libpath.tmp
	@echo '#define SCM_LIBRARY_DIR "$(pkgdatadir)/$(GUILE_EFFECTIVE_VERSION)"'>>libpath.tmp
	@echo '#define SCM_SITE_DIR "$(pkgdatadir)/site"' >> libpath.tmp
	@echo '#define SCM_BUILD_INFO { \' >> libpath.tmp
	@echo '	{ "srcdir", "'"`cd @srcdir@; pwd`"'" }, \' >> libpath.tmp
	@echo ' { "top_srcdir",    "@abs_top_srcdir@" }, \' >> libpath.tmp
	@echo '	{ "prefix",	   "@prefix@" }, \' >> libpath.tmp
	@echo '	{ "exec_prefix",   "@exec_prefix@" }, \' >> libpath.tmp
	@echo '	{ "bindir",	   "@bindir@" }, \' >> libpath.tmp
	@echo '	{ "sbindir",	   "@sbindir@" }, \' >> libpath.tmp
	@echo '	{ "libexecdir",	   "@libexecdir@" }, \' >> libpath.tmp
	@echo '	{ "datadir",	   "@datadir@" }, \' >> libpath.tmp
	@echo '	{ "sysconfdir",	   "@sysconfdir@" }, \' >> libpath.tmp
	@echo '	{ "sharedstatedir", "@sharedstatedir@" }, \' >> libpath.tmp
	@echo '	{ "localstatedir", "@localstatedir@" }, \' >> libpath.tmp
	@echo '	{ "libdir",	   "@libdir@" }, \' >> libpath.tmp
	@echo '	{ "infodir",	   "@infodir@" }, \' >> libpath.tmp
	@echo '	{ "mandir",	   "@mandir@" }, \' >> libpath.tmp
	@echo '	{ "includedir",	   "@includedir@" }, \' >> libpath.tmp
	@echo '	{ "pkgdatadir",	   "$(datadir)/@PACKAGE@" }, \' >> libpath.tmp
	@echo '	{ "pkglibdir",	   "$(libdir)/@PACKAGE@" }, \' >> libpath.tmp
	@echo '	{ "pkgincludedir", "$(includedir)/@PACKAGE@" }, \' \
		>> libpath.tmp
	@echo '	{ "guileversion", "@GUILE_VERSION@" }, \' >> libpath.tmp
	@echo '	{ "libguileinterface", "@LIBGUILE_INTERFACE@" }, \' \
		>> libpath.tmp
	@echo '	{ "LIBS",	   "@GUILE_LIBS@" }, \' >> libpath.tmp
	@echo '	{ "CFLAGS",	   "@GUILE_CFLAGS@" }, \' >> libpath.tmp
	@echo '	{ "buildstamp",    "'"`date`"'" }, \' >> libpath.tmp
	@echo '}' >> libpath.tmp
	@mv libpath.tmp libpath.h

# Typical usage:
#    gen-xyzzy -o filesystem.dat /usr/share/guile/1.8 /usr/local/share/guile/site
#  Where /usr/share/guile points to the system guile installation and
#  /usr/local/share/guile/site points to the GNU Radio installed guile files. Note
# that this requires GNU Radio to be installed before the outout will be correct.
filesystem.dat:
	-$(RM) -f filesystem.dat
	echo $(PYTHON) $(srcdir)/gen-xyzzy $(GUILE_INSTALL_PATH) $(datarootdir)/guile/site > filesystem.dat
	$(PYTHON) $(srcdir)/gen-xyzzy $(GUILE_INSTALL_PATH) $(datarootdir)/guile/site > filesystem.dat

CLEANFILES = filesystem.dat


# Create a symlink from gr-run-waveform-binary to gr-run-waveform
install-exec-local:
	-$(RM) $(DESTDIR)$(bindir)/gr-run-waveform
	(cd $(DESTDIR)$(bindir) && $(LN_S) gr-run-waveform-binary gr-run-waveform)

uninstall-local:
	-$(RM) $(DESTDIR)$(bindir)/gr-run-waveform
